# bump_version.yml - Version bump workflow
#
# This workflow handles version bumping following semantic versioning.
# It updates version in all necessary files and creates a version commit.
#
name: Bump Version

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        type: choice
        options:
        - patch
        - minor
        - major
        - prepatch
        - preminor
        - premajor
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        type: string
        default: ''

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      old_version: ${{ steps.bump.outputs.old_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync --locked
        uv pip install bump-my-version

    - name: Get current version
      id: current
      run: |
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Configure bump-my-version
      run: |
        # Create .bumpversion.cfg if it doesn't exist
        if [ ! -f .bumpversion.cfg ]; then
          cat > .bumpversion.cfg << 'EOF'
        [bumpversion]
        current_version = ${{ steps.current.outputs.version }}
        commit = False
        tag = False
        parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(-(?P<release>[a-z]+)(?P<num>\d+))?
        serialize =
            {major}.{minor}.{patch}-{release}{num}
            {major}.{minor}.{patch}

        [bumpversion:part:release]
        optional_value = prod
        values =
            alpha
            beta
            rc
            prod

        [bumpversion:file:pyproject.toml]
        search = version = "{current_version}"
        replace = version = "{new_version}"

        [bumpversion:file:src/selectfilecli/__init__.py]
        search = __version__ = "{current_version}"
        replace = __version__ = "{new_version}"
        EOF
        fi

    - name: Bump version
      id: bump
      run: |
        # Determine bump command based on input
        if [[ -n "${{ inputs.prerelease_tag }}" ]]; then
          BUMP_ARGS="${{ inputs.bump_type }} --new-version {major}.{minor}.{patch}-${{ inputs.prerelease_tag }}1"
        else
          BUMP_ARGS="${{ inputs.bump_type }}"
        fi

        # Run bump-my-version
        echo "Running: bump-my-version bump $BUMP_ARGS"
        ./scripts/sep_queue.sh --timeout 600 -- uv run bump-my-version bump $BUMP_ARGS

        # Get new version
        NEW_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "old_version=${{ steps.current.outputs.version }}" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update CHANGELOG.md
      run: |
        # Add new version section to CHANGELOG
        cat > changelog_entry.md << 'EOF'
        ## [${{ steps.bump.outputs.new_version }}] - $(date +%Y-%m-%d)

        ### Added
        * _To be filled_

        ### Changed
        * _To be filled_

        ### Fixed
        * _To be filled_

        ### Removed
        * _To be filled_

        EOF

        # Insert after the ## [Unreleased] section
        if grep -q "## \[Unreleased\]" CHANGELOG.md; then
          sed -i '/## \[Unreleased\]/r changelog_entry.md' CHANGELOG.md
        else
          # If no Unreleased section, add at the beginning
          cat changelog_entry.md CHANGELOG.md > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
        fi

        rm changelog_entry.md

    - name: Run tests
      run: |
        # Ensure tests pass with new version
        ./scripts/sep_queue.sh --timeout 1800 -- uv run pytest --tb=short

    - name: Create version commit
      run: |
        ./scripts/sep_queue.sh --timeout 600 -- bash -c '
          git config --local user.email "713559+Emasoft@users.noreply.github.com"
          git config --local user.name "Emasoft"
          git add pyproject.toml src/selectfilecli/__init__.py CHANGELOG.md .bumpversion.cfg
          git commit -m "$(cat <<'"'"'COMMIT_MSG'"'"'
        chore: bump version from ${{ steps.bump.outputs.old_version }} to ${{ steps.bump.outputs.new_version }}

        * Updated version in pyproject.toml
        * Updated version in __init__.py
        * Added CHANGELOG entry for new version
        COMMIT_MSG
        )"
        '

    - name: Push changes
      run: |
        git push

    - name: Create version tag
      if: inputs.prerelease_tag == ''
      run: |
        ./scripts/sep_queue.sh --timeout 300 -- bash -c '
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release version ${{ steps.bump.outputs.new_version }}"
          git push origin "v${{ steps.bump.outputs.new_version }}"
        '

    - name: Summary
      run: |-
        echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Old Version**: ${{ steps.bump.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type**: ${{ inputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        if [[ -n "${{ inputs.prerelease_tag }}" ]]; then
          echo "- **Prerelease**: ${{ inputs.prerelease_tag }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Update CHANGELOG.md with actual changes" >> $GITHUB_STEP_SUMMARY
        echo "2. Create a pull request if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Run the release workflow when ready" >> $GITHUB_STEP_SUMMARY
