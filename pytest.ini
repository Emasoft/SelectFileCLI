[pytest]
# Force sequential execution to prevent process explosions
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function
addopts =
    # Sequential execution enforced by environment
    # Note: Do NOT add comments on same line as options - pytest will try to parse them!
    # If pytest-xdist is installed, add: -n 0
    
    # Parallelism control
    # Disable xdist parallelism
    -n 0
    # Single process execution
    --maxprocesses=1
    # No distributed testing
    --dist=no

    # Output control
    --verbose
    --strict-markers
    # Shorter tracebacks
    --tb=short

    # Coverage
    --cov=selectfilecli
    --cov-report=term-missing
    --cov-report=html
    --cov-fail-under=80
    --cov-config=.coveragerc

    # Timeouts and safety
    # 5-minute timeout per test
    --timeout=300
    # Thread-based timeout
    --timeout-method=thread

    # Performance
    # Show 10 slowest tests
    --durations=10
    # Show all test outcomes
    -ra

markers =
    asyncio: marks tests as async (automatically handled by pytest-asyncio)
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests

# Coverage options (when using pytest-cov)
[coverage:run]
source = src
omit =
    */tests/*
    */__pycache__/*
    */venv/*
    */.venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
